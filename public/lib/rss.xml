<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[note]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>note</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 24 May 2024 04:39:45 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 24 May 2024 04:39:41 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[mysql note]]></title><description><![CDATA[ 
 <br><br>
<br>일번적으로 대소문자를 구분하지 않음
<br>주로 예약어(SELECT, FROM)는<br>
대문자, 사용자 정의어(code, name, population)는 소문자를 사용
<br><br><br><br>SHOW DATABASES;
복사<br><br>SHOW TABLES;
복사<br><br>DESC &lt;table_name&gt;;
복사<br><br><br>USE &lt;database_name&gt;;
복사<br><br>SELECT * FROM &lt;table_name&gt;;
복사<br><br><br><br>mysql -u root -p비번 &lt; schema-data.sql
복사<br><br>mysql -u root -p비번 &lt; schema.sql
mysql -u root -p비번 &lt; data.sql
복사<br><br>mysql -u root -p비번 data_base_name &lt; data.sql
복사<br><br><br>Info
<br>-- : 한줄주석, -- 를 한 후에 반드시 한칸을 띄어서 사용해야 합니다.
<br>/* */ : 블럭주석
<br>-- 국가코드와 국가 이름을 출력합니다.
/* SELECT code, population
FROM country; */
SELECT code, name
FROM country;
복사<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>InfoData Manipulation Language<br>
데이터 조작어<br>
데이터 검색, 삽입, 수정, 삭제등에 사용<br>
SELECT, INSERT, UPDATE, DELETE<br>
트랜젝션이 발생하는 SQL문<br><br>SELECT &lt;column_name_1&gt;, &lt;column_name_2&gt;, ...
FROM &lt;database_name&gt;.&lt;table_name&gt;;
또는 FROM &lt;table_name&gt;;
복사<br>-- 전체 조회
SELECT *
FROM world.country;
복사<br>-- code, name 세개의 컬럼 데이터 조회
SELECT code, name
FROM world.country;
복사<br>-- alias 조회
SELECT code AS country_code, name AS country_name
FROM country;
복사<br><br>INSERT INTO &lt;table_name&gt;(&lt;column_name_1&gt;, &lt;column_name_2&gt;, ...)
VALUES(&lt;value_1&gt;, &lt;value_2&gt;, …)
복사<br>-- user1 테이블에 user_id, namex, email, age, rdate를 입력
INSERT INTO user1(user_id, name, email, age, rdate)
VALUES (1, "jin", "pdj@gmail.com", 30, now()),
(2, "peter", "peter@daum.net", 33, '2017-02-20'),
(3, "alice", "alice@naver.com", 23, '2018-01-05'),
(4, "po", "po@gmail.com", 43, '2002-09-16'),
(5, "andy", "andy@gmail.com", 17, '2016-04-28'),
(6, "jin", "jin1224@gmail.com", 33, '2013-09-02');
복사<br><br>UPDATE &lt;table_name&gt;
SET &lt;column_name_1&gt; = &lt;value_1&gt;, &lt;column_name_2&gt; = &lt;value_2&gt;,
WHERE &lt;condition&gt;
복사<br>-- jin 이름을 가지고 있는 사람의 나이를 20, 이메일을 pdj@daum.net으로 변경
UPDATE user1
SET age=20, email="pdj@daum.net"
WHERE name="jin"
복사<br><br>DELETE FROM &lt;table_name&gt;
WHERE &lt;condition&gt;
복사<br>-- 2016-01-01 이전 데이터 삭제 (DML)
DELETE FROM user1
WHERE rdate &lt; "2016-01-01"
복사<br><br>SELECT &lt;컬럼이름 1&gt;, &lt;컬럼이름 2&gt;, ...
FROM &lt;테이블 이름&gt;
WHERE &lt;조건식&gt;
복사<br><br>-- 인구가 7000만에서 1억인 국가를 출력
SELECT *
FROM country
WHERE Population &gt;= 70000000 AND Population &lt;= 100000000;
복사<br><br><br>SELECT *
FROM country
WHERE Continent = "Asia" OR Continent = "Africa";
복사<br><br>-- 인구가 7000만에서 1억인 국가를 출력
SELECT *
FROM country
WHERE Population BETWEEN 70000000 AND 100000000;
복사<br><br>-- 아시아와 아프리카 대륙의 국가 데이터를 출력
SELECT *
FROM country
WHERE Continent IN ("Asia", "Africa");

-- 아시아와 아프리카 대륙의 국가가 아닌 데이터를 출력
SELECT *
FROM country
WHERE Continent NOT IN ("Asia", "Africa");

-- 아시아와 아프리카 대륙의 국가가 아닌 데이터를 출력 (논리연산 사용)
SELECT *
FROM country
WHERE Continent != "Asia" AND Continent != "Africa";
복사<br><br>-- country 테이블에서 국가 코드가 Z로 시작되는 데이터를 출력
SELECT *
FROM country
WHERE code like "Z%";

-- 정부형태에 Republic이 포함된 데이터 출력
SELECT *
FROM country
WHERE GovernmentForm LIKE “%Republic%”;
복사<br><br><br>-- 오름차순 인구순으로 국가의 리스트를 출력
-- ASC는 생략이 가능
SELECT *
FROM country
ORDER BY population ASC
복사<br><br>SELECT *
FROM country
ORDER BY population DESC

-- ORDER BY에 여러개의 정렬 조건을 사용
-- 국가 코드를 알파벳 순으로 정렬하고 같은 국가 코드를 가지면 인구순으로 내림차순으로 정렬
SELECT *
FROM city
ORDER BY CountryCode ASC, Population DESC
복사<br><br>-- 인구가 많은 상위 5개 국가 데이터를 출력
SELECT *
FROM country
ORDER BY population DESC
LIMIT 5;

-- 인구가 많은 상위 6위 ~ 8위의 3개 국가 데이터를 출력
-- OFFSET 사용
SELECT *
FROM country
ORDER BY population DESC
LIMIT 3 OFFSET 5; -- # 5개 스킵하고 3개를 출력

SELECT *
FROM country
ORDER BY population DESC
LIMIT 5, 3; # -- 5개 스킵하고 3개를 출력
복사<br><br>-- city 테이블에서 도시의 인구수가 100만에서 200만인 도시의 국가 코드를 중복을 제거후 출력
SELECT DISTINCT countrycode
FROM city
WHERE population BETWEEN 1000000 AND 2000000;
복사<br><br><br>Note실수 데이터 올림<br>-- 12.345를 올림하여 정수로 나타냄
SELECT CEIL(12.345);

-- 국가별 언어 사용 비율을 소수 첫번째자리에서 올림하여 정수로 나타냄
SELECT CountryCode, Language, Percentage, CEIL(Percentage)
FROM countrylanguage;
복사<br><br>Note실수데이터 반올림<br>-- 12.345를 소수 둘째자리까지 나타내고 소수 셋째자리에서 반올림
SELECT ROUND(12.345, 2);

-- 국가별 언어 사용 비율을 소수 첫번째자리에서 반올림하여 정수로 나타냄
SELECT CountryCode, Language, Percentage, ROUND(Percentage, 0)
FROM countrylanguage;
복사<br><br>Note실수 데이터를 버림<br>-- 12.345를 소수 둘째자리까지 나타내고 소수 셋째자리에서 버림
SELECT TRUNCATE(12.345, 2);

-- 국가별 언어 사용 비율을 소수 첫번째자리에서 버림하여 정수로 나타냄
SELECT CountryCode, Language, Percentage, TRUNCATE(Percentage, 0)
FROM countrylanguage;

SELECT CountryCode, Language, Percentage, ROUND(Percentage, 0), TRUNCATE(Percentage, 0)
FROM countrylanguage;
복사<br><br>Note날짜 데이터 포멧<br><a data-tooltip-position="top" aria-label="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html" rel="noopener" class="external-link" href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html" target="_blank">reference</a><br>-- sakila의 payment 테이블에서 요금 지불일을 "년-월"로 데이터 포멧을 변경했을때,
-- 중복을 제거한 "년-월" 데이터를 출력
SELECT DISTINCT(DATE_FORMAT(payment_date, "%Y-%m")) AS unique_month
FROM payment;
복사<br><br>Note문자열을 합침<br>-- world 데이터베이스의 country 테이블에서 국가코드, 대륙이름과 국가이름이 
-- " / " 구분자로 구분해서 하나의 컬럼에 출력
SELECT code, CONCAT(continent, " / ", name) as continent_name
FROM country;
복사<br><br>Note데이터의 갯수를 출력<br>-- world 데이터 베이스의 city 데이터의 갯수를 출력
SELECT count(*) as city_count
FROM city;
복사<br><br>IF(조건, 참, 거짓)
복사<br>-- 도시 인구가 100만 이상이면 big city,
-- 아니면 small city 출력
-- IF(조건, true, false)
SELECT `Name`, `Population`,
	IF(`Population` &gt;= 100 * 10000, 'big city', 'small city')
FROM city;
복사<br><br>IFNULL(참, 거짓)
복사<br>-- 독립년도가 없는 데이터는 0으로 출력
SELECT IndepYear, IFNULL(IndepYear, 0) as IndepYear
FROM country;
복사<br><br>CASE
	WHEN (조건1) THEN (출력1)
	WHEN (조건2) THEN (출력2)
END AS (컬럼명)
복사<br>-- # 나라별로 인구가 10억 이상, 1억 이상, 1억 이하인 컬럼을 추가하여 출력
SELECT name, population,
	CASE
		WHEN population &gt; 1000000000 THEN "upper 1 bilion"
		WHEN population &gt; 100000000 THEN "upper 100 milion"
		ELSE "below 100 milion"
	END AS result
FROM country;
복사<br>-- 도시에서 인구가 500만 이상 big, 100만 이상 medium, 100만 미만 samll 출력

SELECT `Name`, `Population` 
	, CASE 
		WHEN `Population` &gt;= 500 * 10000 THEN  'big'
		WHEN `Population` &gt;= 100 * 10000 THEN  'medeium'
		ELSE 'small'
	END AS scale
FROM city
ORDER BY `Population` DESC;
복사<br><br>Note여러개의 동일한 데이터를 가지는 특정 컬럼을 합쳐주는 역할<br><br>-- city 테이블의 CountryCode를 묶고 각 코드마다 몇개의 데이터가 있는지 확인
SELECT CountryCode, COUNT(CountryCode)
FROM city
GROUP BY CountryCode;
복사<br>-- 국가별 도시 수를 출력
-- 도시가 많은 상위 10개의 국가, 도시수를 출력
SELECT `CountryCode`, COUNT(`Name`) AS city_count
FROM city
GROUP BY `CountryCode`
ORDER BY city_count DESC
LIMIT 10;
복사<br>-- 국가별 도시 수를 출력
-- 인구수 50만 이상의 10개의 국가, 도시수를 출력
SELECT `CountryCode`, COUNT(`Name`) AS city_count
FROM city
WHERE `Population` &gt;= 50 * 10000
GROUP BY `CountryCode`
ORDER BY city_count DESC
LIMIT 10;
복사<br><br>-- 대륙별 인구수와 GNP 최대 값을 조회
SELECT continent, MAX(Population) as Population, MAX(GNP) as GNP
FROM country
GROUP BY continent;
복사<br><br>-- 대륙별 인구수와 GNP 최소 값을 조회 (GNP와 인구수가 0이 아닌 데이터 중에서)
SELECT continent, MIN(Population) as Population, MIN(GNP) as GNP
FROM country
WHERE GNP != 0 AND Population != 0
GROUP BY continent;
복사<br><br>-- 대륙별 총 인구수와 총 GNP
SELECT continent, SUM(Population) as Population, SUM(GNP) as GNP
FROM country
WHERE GNP != 0 AND Population != 0
GROUP BY continent;
복사<br>-- 대륙별 총인구수 출력
SELECT `Continent`, SUM(`Population`) AS total_population
FROM country
GROUP BY `Continent`;
복사<br>-- 대륙별 평균 GNP
SELECT `Continent`, SUM(`Population`) AS total_population
	, AVG(`GNP`/`Population`) AS avg_gnp
FROM country
GROUP BY `Continent`;
복사<br>-- 평균인당 GBP가 높은 순으로 정렬
SELECT `Continent`, SUM(`Population`) AS total_population
	, AVG(`GNP`/`Population`) AS avg_gnp
FROM country
GROUP BY `Continent`
ORDER BY avg_gnp DESC;
복사<br>-- 고객별 가장 많은 매출 발생 시켜준 상위 3명의 고객 출력
SELECT customer_id, SUM(amount) AS total_amount
FROM payment
GROUP BY customer_id
ORDER BY total_amount DESC
LIMIT 10;
복사<br>-- 고객별 가장 많은 매출 발생 시켜준 상위 3명의 고객 출력
-- 조건: 2005년 6월 이 후
SELECT customer_id, SUM(amount) AS total_amount
FROM payment
WHERE payment_date &gt;= '2005-06-01'
GROUP BY customer_id
ORDER BY total_amount DESC
LIMIT 10;
복사<br><br>-- 대륙별 평균 인구수와 평균 GNP 결과를 인구수로 내림차순 정렬
SELECT continent, AVG(Population) as Population, AVG(GNP) as GNP
FROM country
WHERE GNP != 0 AND Population != 0
GROUP BY continent
ORDER BY Population DESC;
복사<br><br>NoteGROUP BY에서 반환되는 결과에 조건을 줄수 있음<br>-- 대륙별 전체인구를 구하고 5억이상인 대륙만 조회
SELECT continent, SUM(Population) as Population
FROM country
GROUP BY continent
HAVING Population &gt; 500000000;

-- 대륙별 평균 인구수, 평균 GNP, 1인당 GNP한 결과를 
-- 1인당 GNP가 0.01 이상인 데이터를 조회하고
-- 1인당 GNP를 내림차순으로 정렬
SELECT continent, AVG(Population) as Population, AVG(GNP) as GNP,
	AVG(GNP) / AVG(Population) * 1000 as AVG
FROM country
WHERE GNP != 0 AND Population != 0
GROUP BY continent
HAVING AVG &gt; 0.01
ORDER BY AVG DESC;
복사<br><br>Note여러개의 컬럼을 GROUP BY 하고 각 컬럼별 총 합을 row에 출력<br>-- sakila 데이터 베이스에서 고객과 스탭별 매출과 고객별 매출의 총합을 출력
SELECT customer_id, staff_id, SUM(amount) as amount
FROM payment
GROUP BY customer_id, staff_id
WITH ROLLUP;
복사<br><br>-- KPI 지포: 년월별 총 매출, 매출 횟수, 평균 매출
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS monthly
	, SUM(amount) AS total_amount
	, COUNT(amount) AS count_amount
	, AVG(amount) AS avg_amount
FROM payment
GROUP BY monthly;
복사<br>-- 직원별: 년월별 총 매출, 매출 횟수, 평균 매출
SELECT  staff_id, DATE_FORMAT(payment_date, '%Y-%m') AS monthly
	, SUM(amount) AS total_amount
	, COUNT(amount) AS count_amount
	, AVG(amount) AS avg_amount
FROM payment
GROUP BY staff_id, monthly
ORDER BY monthly, staff_id;
복사<br><br>-- staff_id를 기준으로 그룹으로 정렬
USE sakila;

SELECT staff_id
	, DATE_FORMAT(payment_date, '%Y-%m') AS monthly
	, SUM(amount) AS total_amount
FROM payment
GROUP BY staff_id, monthly
WITH ROLLUP;
복사<br><br>
<br>기본값: inner
<br><br><br><br><br><br><br>SELECT * 
FROM `user`
JOIN addr
ON user.ui = addr.ui;
복사<br><br>SELECT `user`.ui, `user`.un, addr.an
FROM `user`
JOIN addr
ON user.ui = addr.ui;
복사<br><br>USE world;
/* USE DATABASE */
-- 국가코드, 국가이름, 도시이름, 국가인구수, 도시인구수 출력
-- 도시의 도시화율(도시인구수/국가인구수)을 출력
-- 조건 : 국가의 인구수가 1000만이 넘는 국가중에서
-- 도시화율이 높은 상위 10개의 국가를 출력
SELECT country.code, country.name, city.name
	, country.population AS country_population
	, city.population AS city_population
	, round(city.population / country.population * 100, 2) AS rate
FROM country
JOIN city
ON country.code = city.countrycode
HAVING country_population &gt;= 1000 * 10000
ORDER BY rate DESC
LIMIT 10;
복사<br>-- 국가이름, 도시갯수
-- JOIN, GROUP BY
SELECT country.`Name`, COUNT(city.`Name`) AS city_count
FROM country
JOIN city
ON country.`Code` = city.`CountryCode`
GROUP BY country.`Name`
ORDER BY city_count DESC;
복사<br>-- country, countrylanguage
-- 국가코드, 국가이름, 언어이름, 국가인구수, 언어사용률, 언어사용인구수 출력
SELECT country.code, country.name, countrylanguage.language
	, country.population, countrylanguage.percentage
	, round(country.population * countrylanguage.percentage / 100)
	AS population_count
FROM country
JOIN countrylanguage
ON country.code = countrylanguage.countrycode;
복사<br><br>SELECT `user`.ui, `user`.un, addr.an
FROM `user`
LEFT JOIN addr
ON user.ui = addr.ui;
복사<br><br><br>SELECT addr.ui, `user`.un, addr.an
FROM `user`
RIGHT JOIN addr
ON user.ui = addr.ui;
복사<br><br><br>-- Left Join
SELECT `user`.ui, `user`.un, addr.an
FROM `user`
LEFT JOIN addr
ON user.ui = addr.ui
UNION -- 이것을 함으로써 Outer가 완성됨.
-- Right Join
SELECT addr.ui, `user`.un, addr.an
FROM `user`
RIGHT JOIN addr
ON user.ui = addr.ui;
복사<br><br><br>두개의 쿼리 결과를 결합, 중복 제거<br>SELECT un FROM `user`
UNION
SELECT an FROM `addr`;
복사<br><br><br>두개의 쿼리 결과를 결합, 중복 제거 X<br>SELECT un FROM `user`
UNION ALL
SELECT an FROM `addr`;
복사<br><br><br>-- 스탭 1
SELECT COUNT(*) FROM country;
SELECT COUNT(*) FROM city;
SELECT COUNT(DISTINCT(`Language`)) FROM countrylanguage;

-- 스탭 2
SELECT
	(SELECT COUNT(*) FROM country) AS total_country,
	(SELECT COUNT(*) FROM city) AS total_city,
	(SELECT COUNT(DISTINCT(`Language`)) FROM countrylanguage) AS total_countrylanguage
FROM DUAL;
복사<br><br>NoteHAVING보다 SubQuery가 더 빠르다.<br>
이유는<br>
HAVING : JOIN(2394096=978944) &gt; Filtering(HAVING:10) =&gt; Result<br>
SubQuery: Filtering(WHERE:10) &gt; JOIN(23910=2390) =&gt; Result<br>-- 800만 인구 이상 도시의 국가코드, 국가이름, 도시이름, 도시인구수 출력 

-- HAVING
SELECT country.code, country.name, city.name, city.population
FROM country
JOIN city
ON country.code = city.countrycode
HAVING city.population &gt;= 800 * 10000;


-- SubQuery
SELECT country.code, country.name, city.name, city.population
FROM country
JOIN (  SELECT countrycode, name, population 
		FROM city 
		WHERE population &gt;= 800 * 10000
	) AS city
ON country.code = city.countrycode;
복사<br>-- WHERE SubQuery
-- 한국보다 인구가 많은 국가의 국가코드, 국가이름, 인구수, GNP 출력
SELECT `Population`
FROM country
WHERE `Code` = 'KOR';
-- 46844000
SELECT `Code`, `Name`, `Population`, `GNP`
FROM country
WHERE `Population` &gt; 46844000;

-- SubQuery
SELECT `Code`, `Name`, `Population`, `GNP`
FROM country
WHERE `Population` &gt; (
	SELECT `Population`
	FROM country
	WHERE `Code` = 'KOR'
);
복사<br><br><br>InfoData Definition Language<br>
데이터 정의어<br>
데이터 베이스, 테이블, 뷰, 인덱스등의 데이터 베이스 개체를 생성, 삭제, 변경에 사용<br>
CREATE, DROP, ALTER, TRUNCATE<br>
실행 즉시 DB에 적용<br><br><br>CREATE DATABASE &lt;database_name&gt;;
복사<br>-- test 데이터 베이스 생성
CREATE DATABASE test;
복사<br><br>CREATE TABLE &lt;table_name&gt; (
	column_name_1 column_data_type_1 column_constraint_1,
	column_name_2 column_data_type_2 column_constraint_2,
	...
)
복사<br>-- 제약조건이 없는 user1 테이블 생성
CREATE TABLE user1(
	user_id INT,
	name Varchar(20),
	email Varchar(30),
	age INT(3),
	rdate DATE
)
복사<br>-- 제약조건이 있는 user2 테이블 생성
CREATE TABLE user2(
	user_id INT PRIMARY KEY AUTO_INCREMENT,
	name Varchar(20) NOT NULL,
	email Varchar(30) UNIQUE NOT NULL,
	age INT(3) DEFAULT '30',
	rdate TIMESTAMP default CURRENT_TIMESTAMP
)
복사<br><br>DROP FROM &lt;database_name&gt;
복사<br>-- 테이블 전체를 모두 삭제 (DLL)
DROP FROM user1
복사<br>-- DATABASE
-- tmp 데이터 베이스 생성
CREATE DATABASE tmp;
SHOW DATABASES;

-- tmp 데이터 베이스 삭제
DROP DATABASE tmp;
SHOW DATABASES;

-- TABLE
-- tmp 데이터 베이스 생성
CREATE DATABASE tmp;

-- tmp 데이터 베이스 선택
USE tmp;

-- tmp 테이블 생성
CREATE TABLE tmp( id INT );

-- tmp 테이블 삭제
DROP TABLE tmp;
복사<br><br>INSERT INTO &lt;table_name&gt;(&lt;column_name_1&gt;, &lt;column_name_2&gt;, ...)
VALUES(&lt;value_1&gt;, &lt;value_2&gt;, …)
복사<br>-- user1 테이블에 user_id, namex, email, age, rdate를 입력
INSERT INTO user1(user_id, name, email, age, rdate)
VALUES (1, "jin", "pdj@gmail.com", 30, now()),
(2, "peter", "peter@daum.net", 33, '2017-02-20'),
(3, "alice", "alice@naver.com", 23, '2018-01-05'),
(4, "po", "po@gmail.com", 43, '2002-09-16'),
(5, "andy", "andy@gmail.com", 17, '2016-04-28'),
(6, "jin", "jin1224@gmail.com", 33, '2013-09-02');
복사<br>-- city_2 테이블 생성
CREATE TABLE city_2 (
	Name VARCHAR(50),
	CountryCode CHAR(3),
	District VARCHAR(50),
	Population INT
)

-- select 절에서 나온 결과데이터를 Insert
INSERT INTO city_2
SELECT Name, CountryCode, District, Population
FROM city
WHERE Population &gt; 8000000;
복사<br><br><br><br>ALTER TABLE `테이블 이름` ADD COLUMN `컬럼 명` `속성값`;
복사<br>ALTER TABLE user ADD contents TEXT NOT NULL;
복사<br><br>ALTER TABLE `테이블 아름` DROP COLUMN `컬럼 이름`;
복사<br>ALTER TABLE user DROP contents;
복사<br><br>ALTER TABLE 테이블명 RENAME COLUMN 변경할 컬럼명 TO 변경될 이름;
복사<br>ALTER TABLE user RENAME COLUMN email TO mail;
복사<br><br>ALTER TABLE `기존 테이블 이름` RENAME `새 테이블 이름`;
복사<br><br>-- 사용중인 데이터베이스의 인코딩 방식 확인
SHOW VARIABLES LIKE "character_set_database"

-- test 데이터 베이스의 문자열 인코딩을 utf8으로 변경
ALTER DATABASE world CHARACTER SET = ascii
ALTER DATABASE world CHARACTER SET = utf8

-- 사용중인 데이터베이스의 인코딩 방식 확인
SHOW VARIABLES LIKE "character_set_database"

-- Table
-- ALTER를 이용하여 Table의 컬럼을 추가하거나 삭제하거나 수정할수 있습니다.

-- ADD
-- user2 테이블에 TEXT 데이터 타입을 갖는 tmp 컬럼을 추가
ALTER TABLE user2 ADD tmp 


-- MODIFY
-- user2 테이블에 INT 데이터 타입을 갖는 tmp 컬럼으로 수정
ALTER TABLE user2 MODIFY COLUMN tmp INT


-- CONVERT TO
-- 테이블 인코딩 확인
show full columns from test2;

-- 테이블의 모든 인코딩 변환
ALTER TABLE user2 CONVERT TO character set utf8;

-- DROP
-- user2 테이블의 tmp 컬럼을 삭제
ALTER TABLE user2 DROP tmp;
복사<br><br>NoteForeign key를 설정하면 데이터의 무결성을 지킬수 있다.<br>
UNIQUE 나 PRAMARY 제약조건이 있어야 설정이 가능하다.<br>-- user 테이블 생성
	create table user(
	user_id int primary key auto_increment,
	name varchar(20),
	addr varchar(20)
);

-- # money 테이블 생성
create table money(
	money_id int primary key auto_increment,
	income int,
	user_id int,
	-- # 외래키 설정
	FOREIGN KEY (user_id) REFERENCES user(user_id)
);

desc money;

-- 수정해서 생성
alter table money
add constraint fk_user
foreign key (user_id)
references user (user_id);

desc money;


-- 데이터 입력
insert into user(name, addr)
values ("jin", "Seoul"), ("andy", "Pusan");


-- 데이터 확인
select * from user;

-- 데이터 입력
insert into money(income, user_id)
values (5000, 1), (7000, 2);



-- 데이터 확인
select * from money;

-- user 테이블에 user_id가 3이 없으므로 에러
insert into money(income, user_id)
values (8000, 3);
delete from money
where user_id = 2;

-- money 테이블에 user_id가 있어서 삭제할수 없다.
delete from user
where user_id = 1;

-- 테이블 삭제도 안된다.
drop table user;

복사<br><br>NoteFOREIGN KEY로 참조되는 데이터를 수정 및 삭제할때 참조되는 데이터까지 수정이나 삭제하는 설정<br>
<br>CASCADE : 참조되는 테이블에서 데이터를 삭제하거나 수정하면, 참조하는 테이블에서도 삭제와 수정
<br>SET NULL : 참조되는 테이블에서 데이터를 삭제하거나 수정하면, 참조하는 테이블의 데이터는 NULL로 변경
<br>NO ACTION : 참조되는 테이블에서 데이터를 삭제하거나 수정해도, 참조하는 테이블의 데이터는 변경되지 않음
<br>SET DEFAULT : 참조되는 테이블에서 데이터를 삭제하거나 수정하면, 참조하는 테이블의 데이터는 필드의 기<br>
본값으로 설정
<br>RESTRICT : 참조하는 테이블에 데이터가 남아 있으면, 참조되는 테이블의 데이터를 삭제하거나 수정할 수 없음
<br>--업데이트되면 같이 업데이트, 삭제되면 NULL 값으로 변경
select * from user;
drop table money;
create table money(
money_id int primary key auto_increment,
income int,
user_id int,

--외래키 설정
FOREIGN KEY (user_id) REFERENCES user(user_id)
ON UPDATE CASCADE ON DELETE SET NULL
);

-- money에 데이터 추가
insert into money(income, user_id)
values (5000, 1), (7000, 2);

-- 데이터 추가 확인
select * from money;

-- user 테이블 업데이트 : money 테이블의 user_id도 같이 업데이트 됨
update user
set user_id = 3
where user_id = 2;

select * from user;
select * from money;


-- user 테이블의 데이터 삭제 : money 테이블의 fk로 설정되어 있는 데이터가 NULL로 변경
delete from user
where user_id = 3;

select * from user;
select * from money;
복사<br><br><br>USE employees;
SELECT COUNT(*)
FROM salaries; -- 2844047
복사<br><br>SHOW INDEX FROM salaries;
복사<br><br><br>-- 408ms
SELECT * FROM salaries WHERE to_date &lt; '1986-01-01';
복사<br><br>-- 8.8s
CREATE INDEX tdate ON salaries (to_date);

SHOW INDEX FROM salaries;
복사<br><br><br>-- 3ms
CREATE INDEX tdate ON salaries (to_date);
복사<br>Note408ms -&gt; 3ms<br><br>DROP INDEX tdate ON salaries;
복사<br><br>-- 변수선언
SET @data = 1;

-- 선언된 변수 출력
SELECT @data;

-- city 테이블에서
SET @RANK = 0;

SELECT @RANK := @RANK + 1 AS ranking, countrycode, name, population
FROM city
ORDER BY population DESC
LIMIT 5;
복사<br><br><br>InfoData Control Language<br>
데이터 제어어<br>
사용자의 권한을 부여하거나 빼앗을때 사용<br>
GRUNT, REVORKE, DENY<br><br>-- 사용자 권한 부여 명령어
GRANT ALL PRIVILEGES ON [dbname.table_name] TO [user@host] IDENTIFIED BY 'my_password';

-- 예제 (호스트 : 로컬호스트)
GRANT ALL PRIVILEGES ON testDB.testTable TO myuser@localhost IDENTIFIED BY 'testPassword';

-- 예제 (호스트 : 원격 접속)
GRANT ALL PRIVILEGES ON testDB.testTable TO myuser@'%' IDENTIFIED BY 'testPassword';

-- 예제 (호스트 : 아이피)
GRANT ALL PRIVILEGES ON testDB.testTable TO myuse@192.168.0.100 IDENTIFIED BY 'testPassword';
복사<br><br>-- 권한 해제 명령어(INSERT, UPDATE, CREATE 권한 해제)
REVOKE insert, update, create ON [dbname.table_name] TO [user@host];
 
-- 권한 해제 명령어(전체 권한 해제)
REVOKE ALL ON [dbname.table_name] TO [user@host];

-- 권한 확인 명령어
SHOW GRANTS FOR [user@host];
복사]]></description><link>root\dev\database\mysql-note.html</link><guid isPermaLink="false">root/dev/database/mysql note.md</guid><pubDate>Mon, 20 May 2024 16:36:19 GMT</pubDate></item><item><title><![CDATA[vscode mysql 플러그인 사용하기]]></title><description><![CDATA[ 
 <br><br><img alt="Pasted image 20240515174351.png" src="\lib\media\pasted-image-20240515174351.png"><br>
<br>입력: mysql
<br>클릭: MySQL
<br>클릭: 설치
<br>클릭: Database
<br><br><br><img alt="Pasted image 20240515175233.png" src="\lib\media\pasted-image-20240515175233.png"><br>
<br>클릭: Database
<br>클릭: AddConnection
<br>입력: EC3_MySQL_Test
<br>입력: 내 public IP
<br>입력: root
<br>입력: yeardream04
<br>클릭: Connect
<br>확인: Success
<br><br><br><img alt="Pasted image 20240515213851.png" src="\lib\media\pasted-image-20240515213851.png"><br>
<br>클릭: filter
<br>클릭: 최상단
<br>확인
<br><br><br><br><img alt="Pasted image 20240515180219.png" src="\lib\media\pasted-image-20240515180219.png"><br>
<br>클릭: Create Query
<br>엔터
<br><br><br><img alt="Pasted image 20240515215016.png" src="\lib\media\pasted-image-20240515215016.png"><br>
<br>작성
<br>SELECT * FROM COLUMNS;

SELECT `COLUMN_NAME` FROM COLUMNS;
복사<br>
<br>클릭: Run
<br>확인
<br>클릭: Run
<br>확인
]]></description><link>root\dev\database\vscode-mysql-플러그인-사용하기.html</link><guid isPermaLink="false">root/dev/database/vscode mysql 플러그인 사용하기.md</guid><pubDate>Wed, 15 May 2024 12:57:49 GMT</pubDate><enclosure url="lib\media\pasted-image-20240515174351.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240515174351.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[EC2 - mariaDB workbench 연결]]></title><description><![CDATA[ 
 <br><br><img alt="Pasted image 20240501003521.png" src="\lib\media\pasted-image-20240501003521.png"><br><br><br><img alt="Pasted image 20240501003750.png" src="\lib\media\pasted-image-20240501003750.png"><br>
<br>Connection Name: EC2-mariadb
<br>Connection Methods: Standard TCP/IP over SSH
<br>SSH Hostname: 자신의_공개아이피:22
<br>SSH Username: ubuntu
<br>SSH-Key File: master-key.pem
<br>Username: hr_admin
<br>해서 7 번 누르면<br><br><br><img alt="Pasted image 20240501004345.png" src="\lib\media\pasted-image-20240501004345.png"><br>
<br>password 적고
<br>ok를 누르고
<br>Continue Anyway 를 누르면
<br>ok를 누르게 되는데
<br>눌러서 꺼버리자.
<br>그리고<br><br><br><img alt="Pasted image 20240501004917.png" src="\lib\media\pasted-image-20240501004917.png"><br>
<br>선택
<br>역시 비번: password
<br>ok
<br><br><br><img alt="Pasted image 20240501004958.png" src="\lib\media\pasted-image-20240501004958.png"><br>baam!!]]></description><link>root\dev\database\mariadb\ec2-mariadb-workbench-연결.html</link><guid isPermaLink="false">root/dev/database/mariaDB/EC2 - mariaDB workbench 연결.md</guid><pubDate>Tue, 30 Apr 2024 16:04:19 GMT</pubDate><enclosure url="lib\media\pasted-image-20240501003521.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240501003521.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[mariaDB 설치]]></title><description><![CDATA[ 
 <br><br>
<br>22.04 "jammy"
<br>10.6
<br><br>sudo apt-get install apt-transport-https curl
복사<br><br>sudo mkdir -p /etc/apt/keyrings
복사<br><br>sudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'
복사<br><br>sudo vi /etc/apt/sources.list.d/mariadb.sources
복사<br># MariaDB 10.6 repository list - created 2024-04-30 05:48 UTC
# https://mariadb.org/download/
X-Repolib-Name: MariaDB
Types: deb
# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.
# URIs: https://deb.mariadb.org/10.6/ubuntu
URIs: https://tw1.mirror.blendbyte.net/mariadb/repo/10.6/ubuntu
Suites: jammy
Components: main main/debug
Signed-By: /etc/apt/keyrings/mariadb-keyring.pgp

sudo apt-get update -y &amp;&amp; sudo apt-get install mariadb-server -y
복사<br><br>
<br><a rel="noopener" class="external-link" href="https://mariadb.org/download/?t=repo-config" target="_blank">https://mariadb.org/download/?t=repo-config</a>
]]></description><link>root\dev\database\mariadb\mariadb-설치.html</link><guid isPermaLink="false">root/dev/database/mariaDB/mariaDB 설치.md</guid><pubDate>Tue, 30 Apr 2024 15:58:12 GMT</pubDate></item><item><title><![CDATA[mariaDB 설치부터 workbench 연결까지]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="mariaDB 설치" data-href="mariaDB 설치" href="\root\dev\database\mariadb\mariadb-설치.html" class="internal-link" target="_self" rel="noopener">하고</a><br><br><a data-tooltip-position="top" aria-label="mariaDB 아이디 생성" data-href="mariaDB 아이디 생성" href="\root\dev\database\mariadb\mariadb-아이디-생성.html" class="internal-link" target="_self" rel="noopener">해서</a><br><br><a data-tooltip-position="top" aria-label="EC2 - mariaDB workbench 연결" data-href="EC2 - mariaDB workbench 연결" href="\root\dev\database\mariadb\ec2-mariadb-workbench-연결.html" class="internal-link" target="_self" rel="noopener">하면 된다.</a>]]></description><link>root\dev\database\mariadb\mariadb-설치부터-workbench-연결까지.html</link><guid isPermaLink="false">root/dev/database/mariaDB/mariaDB 설치부터 workbench 연결까지.md</guid><pubDate>Tue, 30 Apr 2024 17:30:30 GMT</pubDate></item><item><title><![CDATA[mariaDB 아이디 생성]]></title><description><![CDATA[ 
 <br><br>sudo mariadb -u root -p
복사<br><br>CREATE DATABASE hrdb;

GRANT ALL PRIVILEGES ON hrdb.*
TO hr_admin@'%' IDENTIFIED BY 'password'
WITH GRANT OPTION;

FLUSH PRIVILEGES;
EXIT;
복사<br><br>mysql -u hr_admin -p hrdb
# 비번 password
복사<br><br>STATUS;
SOURCE hr_info.sql;
복사<br>
<br><a class="internal-link" data-href="hr_info.sql" href="\hr_info.sql" target="_self" rel="noopener">hr_info.sql</a>
<br><br>SHOW TABLES;
DESC employees;
SELECT * FROM employees;
복사]]></description><link>root\dev\database\mariadb\mariadb-아이디-생성.html</link><guid isPermaLink="false">root/dev/database/mariaDB/mariaDB 아이디 생성.md</guid><pubDate>Tue, 30 Apr 2024 15:57:05 GMT</pubDate></item><item><title><![CDATA[이어드림 DE ssh 보안 업데이트 수동]]></title><description><![CDATA[ 
 <br>진짜 중요!master-key.pem과<br>
같은 디렉토리에서 작업을 해야함<br><br>mkdir ssh-connection
cd ssh-connection
vi master-key.pem
복사<br>아래를 붙여 넣기<br>-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA3iDpFLZokx4Ur5Tsa3nRKnrxbSIm7hL4BHDvJMtpokBSbOdm
djLqYMoX2yr3l+HzJ87HzPeJnXHHWunF2zxlENXqyXoT3b3Re50T5KVrz5r/p3ne
BQ5lOD+I+bTKfTVzPF0PJWeVxXt3YiyqDzSrpjiBnxH6Mdo54mB8rfswwu1Snml7
hPJhsOjYeeBS0KgsmcJS3gdhNOxuaTOsIIV8f2iLeAAiyiJTd/3goH718NfeHN3e
RGfLg0AGHK18IWpHKEgLU9jE79O1KqAx2rkItMfcd3eFvOvDKVxtq7ZbJm+RqRwi
ZNdTv/EGXXKKylo7G7cEnWgF7rqGWDvqNGehpwIDAQABAoIBAQCcuVu64XinVHID
8G9e5XRPJK9y8MXG9FtJxuT0cRD3Casea6Y/f20fHXf3izlmUGXfkGYol/7gt4aQ
/qA7L0Gfv08JGLkrmuJS9WEz0gNfV11KLRIZPy7roOhkRssXzL6huIcXPR7PV23E
Nv9F+0Og4/2Q3n5I7lApCSrvFmwxGzDIv1y2plv2A+nwZXpH1eRDN2gZGffAwg2+
q1Wtj3y0tY36JV8IF9JzJPDQbcwVzC0pjNVZQj+8dRI358Zq1zmC2lROCvsgaPkU
D/gr34M1ZKrAy3ZH6Wy4gCpTn825wFKITpJDh+PuQuU7BWmi5/7cClPHd3ph0FIz
mJIL6zkBAoGBAPFQ6bdhg/9VAoh+FJSWQgXYou4zLKmYsjk5R4pivfXwtS6aISPe
EmCUV2lGge0kxuq4lL6jzzXdESMgKKQbHKSbRBfWGX9lW2L4Newlp+3s/IKV3F07
T+fME9cb2LcY0m0DVpKgJPA1BNycqEhoNcc+r/CbikrIT07/esJsCfYbAoGBAOul
Gu4uZfRcboz+A319dEHl/xZFJs3I6BnmcC62qg9Nwg1pMOH4VlAEHmImnnLlzDH8
rcINPkU5d56Hn/WB+dAdSwrUj5Bq6ZBlvgCjCtIHLMosEY1huJ7DnLmH1l6kH9I4
GhkldcIGXfiDbtFOu+q3mHDrTd1hLXPqJTiWmStlAoGAbBe+WPJJWhoOJG21cklM
EapUcTZjDyTi0FckAIzyYjQMNG+94H8c5D4OWY3HrR4ILCO6HRrrOkln38AL9FZg
oisaeULh8PrJ0K82GC1V53F8OlI+f1SOGlqDmJtUm892knYoVU1+vkpBf0B88NId
JL6juLczXwQS4mP17RjP7XkCgYAv3kU/Nxus7Q3kBEGvP0nbjR4pZvi/+tzzTfVh
9+dJ3pDZ6pFsheb6sCt/4rpzOq0lRmABuHD63PaotIJQ/AtENH8m/xD+1EkH9TMI
rBYpnh2CIDucjcpULgZrReXNKefw60aZ7xshw+tY7VIYoLbZslv8LECQBQqXrmvL
OAR7ZQKBgCH/NqqMDuRBCQ0+ur2RLqjMEmKxWrnbfSn0Uetr8YvagSzqOzOyM/xk
FZYIwJCOUb4JlE8NscoHdXRbcjwWXGKlbUNM523URo0Nfa7NEoVXlSGtl82X++Rp
ySCslDCgiOafpOviJND5INLatij9QVTRBAFlqyJjoOzZwambss7C
-----END RSA PRIVATE KEY-----
복사<br>:wq
복사<br><br><br>집중!업데이트 하기 전에
ssh ubuntu@아이피_주소 -i ./master-key.pem
이거 하고 접속 되는 거 확인하고 해야 해!<br>
접속이 안되면 아래의 과정이 소용이 없음.<br><br>sudo ssh-keygen -t rsa -P '' -f new-master-key
복사<br><br>sudo scp -i ./master-key.pem \
    new-master-key.pub \
    ubuntu@인스턴스_아이피:/home/ubuntu/.ssh 
복사<br><br>sudo ssh -i ./master-key.pem \
    ubuntu@인스턴스_아이피 \
    "cd ~/.ssh &amp;&amp; cat new-master-key.pub &gt; authorized_keys"
복사<br>집중!일단
ssh ubuntu@아이피_주소 -i ./master-key.pem
접속 해보자. 여기서 접속이 안된다고 하면 성공
그리고 
ssh ubuntu@아이피_주소 -i ./new-master-key
이렇게 접속 한다면 일단은 성공<br><br>sudo chmod 600 master-key.pem  # 키 삭제 권한 부여
mv new-master-key master-key.pem
sudo chmod 400 master-key.pem
rm new-master-key.pub
복사<br>Cite여기까지 하면 ssh-connection 디렉토리엔 딸랑 master-key.pem 파일만 남을 것이다.<br>
그럼 다시
ssh ubuntu@아이피_주소 -i ./master-key.pem
접속을 해보고 성공 한다면, 우리 조금만 더 편해져 보자.<br><br><br><br>Note장인의 손맛은 어지러울 수 있기 때문에 요약부터<br>cd ..
mv ssh-connection ~/.key
vi join.sh
복사<br>ssh ubuntu@아이피_주소 -i ~/.key/master-key.pem
복사<br>sudo chmod +x ./join.sh
./join.sh
복사<br>경고?가독성...<br><br><br>cd ..
복사<br>해서<br><br>mv ssh-connection ~/.key
복사<br>하고<br><br>cd
복사<br>홈으로 가서<br><br>vi join.sh
복사<br>하고<br><br>ssh ubuntu@아이피_주소 -i ~/.key/master-key.pem
복사<br>한 다음에<br><br>sudo chmod +x ./join.sh
복사<br>그리고<br><br>./join.sh
복사<br>하면 잘 접속 될 걸?? 되겠지????]]></description><link>root\dev\linux\이어드림-de-ssh-보안-업데이트-수동.html</link><guid isPermaLink="false">root/dev/linux/이어드림 DE ssh 보안 업데이트 수동.md</guid><pubDate>Mon, 06 May 2024 16:33:55 GMT</pubDate></item><item><title><![CDATA[도커 설치 및 기본 사용법]]></title><description><![CDATA[ 
 <br><br><br>sudo wget -qO- http://get.docker.com/ | sh
복사<br><br>
<br>도커는 실행할 때, 관리자 권한으로 실행 해야 한다.
<br>sudo를 일일이 입력하기 번거롭다면, 아래의 명령어를 입력한다.
<br><a data-tooltip-position="top" aria-label="https://davi06000.tistory.com/25" rel="noopener" class="external-link" href="https://davi06000.tistory.com/25" target="_blank">reboot 해줘야</a> 한다.
<br>sudo usermod -aG docker 사용자계정
복사<br>그리고 위의 사항이 잘 적용 됐는지 확인 하기 위해서<br>
다시 계정을 나갔다가 들어와서 아래의 명령어를 입력한다.<br>docker version
복사<br>만약 제대로 되지 않았다면, 올바른 정보를 출려하지 않고,<br>
sudo를 붙였을 때, 정보가 나타날 것이다.<br><br><br>docker search ubuntu
복사<br><br><a rel="noopener" class="external-link" href="https://hub.docker.com" target="_blank">https://hub.docker.com</a> -&gt; Browse popular images<br>
-&gt; 찾고 싶은 이미지 이름 클릭 -&gt; Tag 탭 클릭<br><br>docker pull ubuntu:22.04
복사<br><br>docker images
복사<br><br><br><br># docker run -i -t ubuntu:18.04 /bin/bash
# 예전 버전
docker run -it ubuntu:22.04 bash
# 마지막의 /bin/bash를 실행해야 한다.

docker container run -d --name web -p 3000:3000 duddy/dc:docker-test1
# 좀 더 자세하게
복사<br><a rel="noopener" class="external-link" href="https://fronquarry.tistory.com/27" target="_blank">https://fronquarry.tistory.com/27</a><br><br><br>
<br>사용자의 입출력을 허용 함
<br><br>
<br>가상 터미널 환경을 에뮬레이터 함  
<br>Note이 옵션을 사용해야만 bash를 띄워서 명령을 입출력 할 수 있음<br><br>Note도커는 vmware와 같은 가상 머신과 다르게<br>
메인 실행 파일을 실행 시켜줘야 한다.<br>
때문에 이렇게 마지막에 시작 해야할 프로그램을 실행 시켜준다.<br><br>Note도커에서 이미지를 pull 해서 가지고 온 우분투 이미지는<br>
아무것도 없고, 거기에서 ps를 해보면 bash와 ps 말고는 실행된 게 없다.<br>
그렇기 때문에 이 안에서 뭔가를 설치하면 apt-get update를 필수로 해줘야<br>
프로그램을 설치 할 수 있는 환경이 만들어 진다.<br><br><br><br>exit
복사<br><br>docker ps -a
복사<br>Notedocker ps -a 명령의 출력 결과물의 맨 마지막 컬럼에 name을 보면<br>
뭔가 임의로 만들어진 문자열을 볼 수 있다.<br>
실행 절차에서 이름을 정해줬더라면 그 이름을 썼겠지만<br>
그렇지 않았기 때문에 생긴 이름이다.<br><br><br><br>docker start container_id
# 혹은
docker start container_name
복사<br>docker start 8915d6dbee06

docker start ubuntu:22.04
복사<br>위에서 실행할 때 run으로 했고, 지금은 start로 실행한다.<br>
차이는 run은 실행하고, 안으로 들어가는 것이고,<br>
start는 밖에서 실행만 한다는게 요점이다.  <br><br><br><br>sudo docker ps -a
복사<br><br><br>docker attach container_id
# 혹은
docker attach container_name
복사<br>docker attach 8915d6dbee06

docker attach ubuntu:22.04
복사<br><br><br>ctrl + p + q
복사<br>이는 bash의 단축키다.<br><br><br>docker rm container_id
# 혹은
docker rm container_name
복사<br><br><br>docker exec container_id 명령어
# 혹은
docker exec container_name 명령어
복사<br><br><br><br><br>docker rmi container_id
# 혹은
docker rmi container_name
복사<br><br><br>docker pull nginx:latest
# latest는 항상 최신 버전을 가르킨다.
복사<br><br>docker run -d --name hello-nginx nginx:latest
# 데몬을 실행하기 때문에 /bin/bash같이 실행파일을 지정하지 않아도 된다.
복사<br><br>docker run -d --name hello-nginx -p 8000:80 nginx:latest
# -p 8000:80 === 호스트:컨테이너
복사<br><br>도커는 이미지와 컨테이너가 나뉘고<br>
이미지로 컨테이너를 만든다.<br>
컨테이너를 만들고, 그 안에서 어떤 작업을 하여<br>
자료를 저장하거나 지울 때에는,<br>
기존의 이미지에 영향을 미치는 가상 머신과는 다르게<br>
이미지에 영향은 받지 않는다.<br>때문에 하나의 이미지로 여러 개의 컨테이너를 만들어서<br>
각기 다른 환경에서 서로 아무런 작용 없이 작업을 할 수 있다.<br>이것은 마치 git의 브런치 같은 느낌을 준다.<br>하지만 좀 더 명확하게 설명하자면<br>이미지는 prototype,<br>
그리고 그 prototype을 기반으로 쌓아 올린 객체,<br>
동일한 props를 지우거나 삭제, 혹은 변경을 한다면,<br>
오버라이딩 하여 값을 처리하는 느낌이다.]]></description><link>root\dev\docker\도커-설치-및-기본-사용법.html</link><guid isPermaLink="false">root/dev/docker/도커 설치 및 기본 사용법.md</guid><pubDate>Fri, 12 Apr 2024 07:50:42 GMT</pubDate></item><item><title><![CDATA[docker note]]></title><description><![CDATA[ 
 <br><br><br>docker login
복사<br><br>docker info | grep -i username
복사<br><br>docker logout
복사<br><br>docker image tag tagname:1.0 username/tagname:1.0
docker push username/tagname:1.0
복사<br><br><br><br>docker images
복사<br><br>docker pull 이미지_이름:버전
# docker pull ubuntu:22.04
# docker pull ubuntu:latest
# docker pull eninx:latest
복사<br><br><a rel="noopener" class="external-link" href="https://hub.docker.com" target="_blank">https://hub.docker.com</a> <br>docker search 이미지이름
# docker search ubuntu
복사<br><br>FROM nginx:latest
COPY index.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]	
# ---&gt; 해당 이미지가 docker run 으로 컨테이너화가 될때 내부에 데몬 실행
복사<br>집중!파일 Dockerfile 다른 것으로 하면 안됨<br>docker build -t your-image-name .
# docker build -t testweb:1.0 .
복사<br><br>docker rmi container_id
# 혹은
docker rmi container_name
복사<br><br><br><br><br>docker ps
복사<br><br>docker ps -a
복사<br><br><br>docker create -i -t --name 컨테이너_이름 이미지_이름:버전
# docker create -i -t --name myUbuntu ubuntu:latest
복사<br>Info
<br>-i 상호 입출력
<br>-t tty를 활성화하여 bash 셸을 사용하도록 컨테이너에서 설정.

이 두 옵션을 사용하지 않으면 shell을 사용할 수 없음<br><br>docker create -p 8001:80 --name 컨테이너_이름 이미지_이름:버전
# docker create -p 8001:80 --name myUbuntu enginx:latest
복사<br>Info
<br>-p a:b: 포트포워딩

이렇게 하면 a를 b로 접근 시켜준다<br><br>docker start 컨테이너_이름
복사<br><br>docker attach 컨테이너_이름
복사<br><br>단축키Ctrl + P + Q<br><br>docker rm 컨테이너_이름
# docker rm myUbuntu
복사<br><br><br><br>docker cp 복사대상파일 tag:/경로
복사]]></description><link>root\dev\docker\docker-note.html</link><guid isPermaLink="false">root/dev/docker/docker note.md</guid><pubDate>Sun, 05 May 2024 15:36:20 GMT</pubDate></item><item><title><![CDATA[ubuntu node]]></title><description><![CDATA[ 
 <br><br>cat /etc/os-release
복사<br><br><br>tar -cvf 압축할이름.tar 디렉토리
복사<br>tar -xvf 압축파일이름.tar
복사<br><br><br>sudo apt install sysstat

sar 2 2
복사<br>2초마다 2번 출력 해라<br>
끝나면 통계도 출력 함<br>sar 2 100 &gt; sar-server1-$(date '+%y-%m-%d').log
복사<br><br><br><br>set -o noclobber
복사<br><br>set +o noclobber
복사<br><br><br>ssh 사용자이름@공개아이피 -i ssh키
복사<br><br><br>alias pscheck='ps -ef | grep $proc'

alias pscheck ssh
복사<br>Note$proc 인자값 처리<br>alias syscall='sudo systemctl $status $proc'

syscall status nginx
복사<br><br><br><br>sudo useradd name

sudo passwd name
복사<br><br>/etc/passwd

/etc/shadow
복사<br><br><br><br>vi .bash_history
복사<br><br>history
!39
복사<br>history 안에 있는 39번째 있는 라인을 실행<br><br><br>PS1='[\h@\w]\$ '
복사<br><br><br>file name
복사<br><br><br>0.0.0.0
복사<br><br><br>more filename
복사<br>cat 대신 단위로 열 수 있네~<br><br><br>sudo tail -f /var/log/nginx/access.log

# 끝에서 3줄만

sudo tail -3 /var/log/nginx/access.log

# 첫줄에서 3줄

sudo head -3 /var/log/nginx/access.log
복사<br><br>awk '{ print $1 }' /var/log/nginx/access.log
복사<br>ubuntu@ip-172-31-6-186:~$ awk '{ print $1 }' /var/log/nginx/access.log | sort | uniq -c | sort -r

	 24 39.114.126.77

		4 74.82.47.3

		3 118.26.39.231

		2 59.88.181.192

		1 71.6.232.24

		1 66.175.213.4

		1 198.235.24.25

		1 172.104.210.105

		1 172.104.11.46

		1 127.0.0.1
복사<br><br><br>ubuntu@ip-172-31-6-186:~$ which adduser

/usr/sbin/adduser

ubuntu@ip-172-31-6-186:~$ which useradd

/usr/sbin/useradd
복사<br><br><br><br>ln test intest
복사<br>
<br>원본파일이 깨져도 괜찮다.
<br><br>ln data1 data1.sl
복사<br>
<br>소프트링크: 원본 깨지면 깨짐 
<br><br><br><br>echo $PATH
복사<br><br>#!/bin/bash
echo -------------------------------------------------
echo 'current time is' $(date '+%Y-%m-%d:%H-%M-%S')
echo -------------------------------------------------
복사<br>파일이 있는 경로를<br>PATH=$PATH:/home/ubuntu/script
복사<br>하면<br>cd
time.sh
복사<br>했을 때<br>-------------------------------------------------
current time is 2024-05-01:00-06-04
-------------------------------------------------
복사<br>출력<br>Warning이렇게만 하면 세션을 나갔다 다시 들어오면 초기화 된다.<br>
때문에 .bashrc에 추가 해야지 초기화 되지 않는다.<br># 이 코드를 추가
PATH=$PATH:/home/ubuntu/script
복사<br><br><br>기본 보안 수준을 설정한다.<br>umask 002
복사<br><br><br>
<br>
최상위 프로세스 (부모, PID=1) -&gt; systemd (init process)

<br>
nginx container -&gt; docker exe -it

<br>nginx가 pid=1


<br>
데몬: 백그라운드에서 돌아가는 프로세스

<br><br><br>
<br>

<br>SIGTERM: 정상종료(graceful shutdown)


<br>

<br>SIGKILL: 비정상종료( shutdown)


<br>Note프로세스는 디렉토리와 같다?<br>ubuntu@ip-172-31-6-186:~$ pstree -p | grep nginx
           |-nginx(16156)---nginx(16157)
ubuntu@ip-172-31-6-186:~$ ls /proc/16156
ls: cannot read symbolic link '/proc/16156/cwd': Permission denied
ls: cannot read symbolic link '/proc/16156/root': Permission denied
ls: cannot read symbolic link '/proc/16156/exe': Permission denied

arch_status         environ            mem            personality   status
attr                exe                mountinfo      projid_map    syscall
autogroup           fd                 mounts         root          task
auxv                fdinfo             mountstats     sched         timens_offsets
cgroup              gid_map            net            schedstat     timers
clear_refs          io                 ns             sessionid     timerslack_ns
cmdline             ksm_merging_pages  numa_maps      setgroups     uid_map
comm                ksm_stat           oom_adj        smaps         wchan
coredump_filter     limits             oom_score      smaps_rollup
cpu_resctrl_groups  loginuid           oom_score_adj  stack
cpuset              map_files          pagemap        stat
cwd                 maps               patch_state    statm
복사<br><br><br><br>향상된 모니터링을 제공<br><img alt="Pasted image 20240429173736.png" src="\lib\media\pasted-image-20240429173736.png"><br>sudo apt -y install glances

sudo glances
복사<br><br>sudo apt -y install all

dstat --all
복사<br><img alt="Pasted image 20240429173923.png" src="\lib\media\pasted-image-20240429173923.png"><br>과부화 테스트도 가능]]></description><link>root\dev\linux\ubuntu-node.html</link><guid isPermaLink="false">root/dev/linux/ubuntu node.md</guid><pubDate>Wed, 01 May 2024 03:16:01 GMT</pubDate><enclosure url="lib\media\pasted-image-20240429173736.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240429173736.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[간단 ssh github 인증]]></title><description><![CDATA[ 
 <br><br> ssh-keygen -t rsa -C "your_email@example.com"
복사<br><br><br><img alt="Pasted image 20240417140113.png" src="\lib\media\pasted-image-20240417140113.png"><br><br><br>ssh -T git@github.com
복사<br>CheckHi [user-name]! You've successfully authenticated, but GitHub does not provide shell access.]]></description><link>root\dev\github\간단-ssh-github-인증.html</link><guid isPermaLink="false">root/dev/github/간단 ssh github 인증.md</guid><pubDate>Thu, 18 Apr 2024 15:29:40 GMT</pubDate><enclosure url="lib\media\pasted-image-20240417140113.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240417140113.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[crontab 예약하기]]></title><description><![CDATA[ 
 <br><br><br>cd ~/LABs
복사<br><br>vi log_backup.sh
복사<br><br>#!/bin/bash
set $(date)
fname="$6-$2-$3-backup"
tar -cvzf /home/ubuntu/LABs/$fname.tar.gz /var/log
복사<br><br>chmod 700 log_backup.sh
복사<br><br>./log_backup.sh
복사<br><br><br><br>crontab -e
복사<br><br>53 01 * * * /home/ubuntu/script/log_backup.sh
복사<br><br>vi /var/mail/ubuntu
복사]]></description><link>root\dev\linux\crontab-예약하기.html</link><guid isPermaLink="false">root/dev/linux/crontab 예약하기.md</guid><pubDate>Tue, 30 Apr 2024 02:19:35 GMT</pubDate></item><item><title><![CDATA[python note]]></title><description><![CDATA[ 
 <br><br>
<br><a data-tooltip-position="top" aria-label="https://velog.io/@dkwjd131/%EC%9E%91%EC%84%B1%EC%A4%91Python-regex-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D" rel="noopener" class="external-link" href="https://velog.io/@dkwjd131/%EC%9E%91%EC%84%B1%EC%A4%91Python-regex-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D" target="_blank">https://velog.io/@dkwjd131/작성중Python-regex-정규표현식</a>
<br><br>a = 10
b = 20
print(a + b)
복사<br>a, b = 1, 2
print(a, b) # 1, 2 완전 쩔어?!
복사<br><br><br>phone = "갈럭시"
usage = 50.888

print("%s 베터리 %d%% 남았음" % (phone, usage))
print("%s 베터리 %.2f%% 남았음" % (phone, usage))

print("{} 베터리 {}% 남았음".format(phone, usage))
print("{} 베터리 {:.2f}% 남았음".format(phone, usage))

print(f"{phone}베터리 {usage}% 남았음")
print(f"{phone}베터리 {usage:.2f}% 남았음")
복사<br><br><br><br>s = "Life is too short."
s.split('i') # token
복사<br><br>s = "Life is too short."
# Life를 This pencil로 바꿔봅시다.
s.replace("Life", "This pencil")
s.replace(" ", "")
복사<br><br><br><br>def sum(a, b):
	return a + b
print(sum(1, 2))
복사<br><br>f = lamda a, b : a + b
print(f(3, 5))
복사<br><br>def call_back(lam):
	return lam(10)

print(call_back(lambda num : num + 20)) # 30
복사<br><br>def add(a, b)
	'''
	a, b: integer
	return: a, b를 입력 받아서 더한 값
	'''
	c = a + b
	return c
복사<br><br>def add(a:int, b:int): -&gt; int
	c = a + b
	return c
복사<br><br>def add_many(*args):
    print(args) # (1, 2, 3, 4, 5)

add_many(1, 2, 3, 4, 5)
복사<br>튜플로 받을 수 있음<br><br><br>
name = "kim"

def change_name()
	global name = "what 쓰지마 이거"

change_name()

print(name) # "what 쓰지마 이거"
복사<br><br><br>Note배열이라고 하지 않고 리스트라고 함<br><br>
L3 = [1, "Hi", 3.14, [1, 2, 3]] 
print(L3) # [1, 'Hi', 3.14, [1, 2, 3]]
복사<br><br>L = [1, 2, 3, 4, 5]
L[0] # 1
복사<br><br># L의 첫번째부터 index2 까지 자르기
L[0:2]
# 두번째 부터 네번재까지 자르기
L[1:4]
# 생략가능
L[:3] # start를 생략하면 맨 앞부터
L[1:] # end를 생략하면 맨 뒤까지

L[:-1] # 맨 마지막 원소 제외하고 나머지
L[-1:]

L[2:-1] #end 부터 start까지
len(L)
L[1:len(L)] == L[1:] # True


# L[start:end:step]
a = L[0:5] # 1, 2, 3, 4, 5
b = L[0:5:2] # 1, 3, 5
c = L[::-1] # 5, 4, 3, 2, 1
d = L[::-2] # 5, 3, 1
print(a) # [5, 4, 3, 2, 1] 
print(b) # [5, 3, 1] 
print(c) # [1, 2, 3, 4, 5] 
print(d) # [1, 3, 5]

복사<br><br>L = [1, 2, 3]
L2 = [4, 5]
print(L + L2) # [1, 2, 3, 4, 5]  concatenation

L * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3]

복사<br><br>L = [1, 2, 3]
L = [1, 2, 3, 4, 5]
L2 = [4, 5]
print(L + L2) # [1, 2, 3, 4, 5, 4, 5]
복사<br><br>L = []
L.append(3)
L.append(2)
L.append(1)
복사<br><br><br># sort()를 이용해 L을 정렬합니다.
L = [4, 3, 16]
sorted(L) # 원본 보존
L
L.sort()
L # 원본 훼손
L.sort(reverse=True)
L # 내림차
복사<br><br>names = ["kim", "park", "chang", "jessica"]
names.sort(key=lambda s : len(s), reverse=True)

names
복사<br><br>
inputs = input("숫자 여러개 입력하라: e.g. 1, 2, 3, 4, ...")

# 특정 원소 표현을 가지는 리스트를 만들고 싶을 때 사용
total = [int(x) for x in inputs.split(",")]
print(total, sum(total))

# 매우 좋고만

복사<br><br>def cut_string(word:str, separator:str = ",") -&gt; list:
	return [w for w in word.split(separator)]

print(cut_string("와, 이렇게, 하면, 어떨까?"))
# ['와', ' 이렇게', ' 하면', ' 어떨까?']

복사<br>## 입력: a, b, c, d, ...., asdf, qwer, dfd
## 출력: a b c d .... asdf qwer dfd
## 조건: split() 함수에서 ','를 쓰지 않고 빈 칸으로 잘라서 사용하시오.
temp = "a, b, c, d, ...., asdf, qwer, dfd"

outputs = []
for x in temp.split():
	x = x[:-1]
	# x = x.replace(", ", "")
	outputs.append()
	

ourputs = [x[:-1] for x in temp.split()]

for x in outputs:
	print(x, end = " ")
복사<br><br><br><br>arr:list = [1,2,3,4]
for elem in arr:
	print(elem)
복사<br><br><br><br>coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '핸드드립', '콜드브루']
prices = [4100, 4600, 4600, 5100, 6000, 5000]
복사<br><br>for i in range(len(coffees)):
	if prices[i] &lt;= 5000:
		print(f"{coffees[i]}: {prices[i]}원")
복사<br><br>for t in enumerate(prices):
	if t[1] &lt;= 5000:
		print(coffees[t[0]])

# 응용
for i, price in enumerate(prices):
	if price &lt;= 5000:
		print(coffees[i])
복사<br><br>for coffee, price in zip(coffees, prices):
if price &lt;= 5000:
	print(coffee)
복사<br><br><br>a: int = 10
b: str = "this is string"
c: float = 0.1
d: float = 0.2
a = "200" # 되기는 하는데 오류가 안뜨네.
print(0.1 + 0.2)
print(c + d) # 안된다...
복사<br><br><br>what = True
def huh():
	if what:
		print("wow")
	else:
		print("ooo!")
huh()
what = False
huh()
복사<br><br>test = False if 1 &lt; 2 else True
복사<br><br><br>obj = {
	"a": 10,
	"b": "wowo",
	"arr": [1, 2, 3]
}
obj["c"] = "huh??"
print(obj)
print(obj["a"])
print(obj["arr"][1])
for key in obj:
	print(f"key: {key}, value: {obj[key]}")
복사<br><br><br>D = {'name': 'kim', 'phone': '01012345679', 'birth': '1234'}

D.keys() # dict_keys(['name', 'phone', 'birth'])
D.values() # dict_values(['kim', '01012345679', '1234'])
D.items() # dict_items([('name', 'kim'), ('phone', '01012345679'), ('birth', '1234')])
print(D.get('name', 0)) # kim
복사<br><br>"phone" in D # True
"1234" in D.values() # True
복사<br><br><br>class Box():
	width = 100
	height = 100
	color = "#aaa"
	name = "box"
	def __init__(self, name):
		self.name = name
		
	def intro(self):
		print(f"My name is {self.name}!!")

boxA = Box("boxA")
boxA.intro()
복사<br><br>class Notebook:

	def __init__(self, 
							brand:str = "", 
							cpu:str = "", 
							ram:int = 0,
							year: int = "",
							weight: float = 0.1,
							os: str = "",
							color: str = "",
							price: int = 0) -&gt; None:
		self.brand = brand
		self.cpu = cpu
		self.ram = ram
		self.year = year
		self.weight = weight
		self.os = os
		self.color = color
		self.price = price
	def get_info(self):
		for key, value in vars(self).items():
			print(f"{key}: {value}")


nb = Notebook(
	brand = "느그",
	cpu = "뇌",
	ram = 256,
	year = 2024,
	weight = 2.1,
	os = "뭐?!",
	color = "#aaa",
	price = 7
)
nb.get_info()
복사<br><br><br>class Box():
	width = 100
	height = 100
	color = "#aaa"
	name = "box"
	def __init__(self, name):
		self.name = name
		
	def intro(self):
		print(f"My name is {self.name}!!")
	def huhOverride(self):
		print("Do it!!")

class PizzaBox(Box):
	def __init__(self, name):
		super().__init__(name)
		self.name = f"{name} pizza {super().name}"
	def huhOverride(self):
		super().huhOverride()
		print("what!!")

nene = PizzaBox("nene")
nene.intro()
nene.huhOverride()
복사<br><br><br>class Box():
	width = 100
	height = 100
	_color = "#aaa"
	name = "box"
	def __init__(self, name):
		self.name = name
		
	def intro(self):
		print(f"My name is {self.name}!!")
	def huhOverride(self):
		print("Do it!!")
	def getColor(self):
		return self._color
	
class PizzaBox(Box):
	__content = "empty"
	def __init__(self):
		super().__init__("pizza")
		self.name = f"{self.name} {super().name}"
	def setPizza(self, content):
		self.__content = content
	
	def checkPizza(self):
		print(self.__content)
	
	def getPizza(self):
		content = self.__content
		self.__content = "empty"
		return content

pizzaBox = PizzaBox()
pizzaBox.checkPizza()
pizzaBox.setPizza("basic pizza")
pizzaBox.checkPizza()
pizza = pizzaBox.getPizza()
pizzaBox.checkPizza()
print(f"Very delicious {pizza} Yum Yum~")
pizzaBox.intro()
복사<br><br><br>Note사용하기 위해서는 from abc import * 를 불러와야함.<br>from abc import *

class IBox():
	@abstractclassmethod
	def getName(self):
		pass
	def printInfo(self):
		pass

class GoldBox(IBox):
	name = "GoldBox"
	def getName():
		print(f"this name is {name}")
	pass

print(GoldBox().name)
복사<br><br><br>요론 느낌.<br><br>def so(func):
	print("what!1")
	func()
	print("what!2")

@so
def what():
	print("뭐!!!")
복사<br>def so(func):
	print("what!1")
	func()
	print("what!2")

so(lambda: print("뭐!!"))
복사<br>function so(func) {
	console.log("what1");
	func();
	console.log("what2");
}

so(() =&gt; {
	console.log("뭐!!")
})
복사<br><br>def so(func):
	def wrap():
		print("what!1")
		func()
		print("what!2")
	return wrap

@so
def what():
	print("뭐!!")

what()
복사<br>def so(func):
	def wrap():
		print("what!1")
		func()
		print("what!2")
	return wrap

what = so(lambda: print("뭐!!"))
what()
복사<br>function so(func) {
	return () =&gt; {
		console.log("what1");
		func()
		console.log("what2");
	}
}

let what = wow(() =&gt; {
	console.log("뭐");
})

what()

복사<br>def so(func):
	def wrap():
		print("what!1")
		func()
		print("what!2")
	return wrap

def what():
	print("뭐!!")

huh = so(what)
huh()
복사<br>function so(func) {
	return () =&gt; {
		console.log("what1");
		func();
		console.log("what2");
	}
}

function what() {
	console.log("뭐!!");
}

const huh = so(what);
huh();

복사<br><br><br>import re
복사<br><br>oldman_id = "911210-1234567"
res = re.search("(?&lt;=-\\d).+", oldman_id)
print(res.group()) #234567
복사<br>찾기<br><br>oldman_id = "911210-1234567"
print(re.sub("(?&lt;=-\\d).+", "******", oldman_id))
# 911210-1******
복사<br>치환<br><br><br>def div(a, b):
    try:
        return a / b
    except:
        print("0으로 나눌 수 가 있어?!!!??")


div(9, 3)
div("a", 5)
div(8, 0)
복사<br>def div(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        print("0으로 나눌 수 가 있어?!!!??")
    except:
	    print("뭔가 잘 못 됐어!!")


div(9, 3)
div("a", 5)
div(8, 0)
복사<br><br><br><br>inputs = input("숫자 여러개 입력하라: e.g. 1, 2, 3, 4, ...")
print(inputs)
total = 0
for x in inputs.split(","):
	x = int(x)
	total += x
print(total)

복사<br><br><br><br>with open('./test.txt', 'r', encoding='utf-8') as f:
	text = f.read()
print(text)
복사<br><br># f.readline()를 통해 data 폴더안에 있는 test.txt를 read mode로 열어봅니다.
with open('./test.txt', 'r', encoding='utf-8')	as f:
	 lines = f.readlines()
복사<br><br># f.readlines()를 통해 data 폴더안에 있는 test.txt를 read mode로 열어봅니다.
txt = []
with open('./test.txt', 'r', encoding='utf-8')	as f:
	for line in f:
		txt.append(line)
복사<br># for문을 통해 data 폴더안에 있는 test.txt를 read mode로 열어서 출력해봅니다.
with open('./test.txt', 'r', encoding='utf-8')	as f:
	txt = [line for line in f]

print(txt)
복사<br><br># test.txt를 read mode로 열고 할 일이 끝나면 자동으로 닫는다.
output = []
with open('./test.txt', 'r', encoding='utf-8')	as f:
	for line in f:
		if 1 &lt; len(line[:-1]):
			output.append(line)


# 두글자 이상인 텍스트만 output list에 저장한다.

# result.txt로 output list에 있는 내용을 저장하기 위해 write mode로 열었다.
with open('./restul.txt', 'w', encoding='utf-8')	as f:
	for line in output:
		f.write(line)
		

# 제대로 데이터가 저장되어 있는지, 불러와서 확인한다.
with open('result.txt', 'r') as f:
    output = [line for line in f]


print(output)
복사<br><br><br>import pickle   # serialization

output = ["what", "one", "why?!"]

with open("result.pk", 'wb') as f:
    pickle.dump(output, f)

with open("result.pk", 'rb') as f:
    output2 = pickle.load(f)
    
print(output2)
복사<br>바이너리로 바꿔서 아주 빠르게 데이터들을 처리 할 수 있는 포멧]]></description><link>root\dev\python\python-note.html</link><guid isPermaLink="false">root/dev/python/python note.md</guid><pubDate>Tue, 30 Apr 2024 17:45:35 GMT</pubDate></item><item><title><![CDATA[이어드림스쿨 실습용 wsl 배포 import]]></title><description><![CDATA[ 
 <br>Note이어드림스쿨 윈도우용 환경가이드 세팅을 참고하여 만든 wsl 통파일 배포


<br>mysql
<br>python conda
<br>python packages
<br>docker
<br>그 외 자잘한 세팅

<br>wsl 최초 로그인시 계정으로 로그인 (root로 로그인 하는 거 수정)
<br>로그인 할 때 비번 표시 (보안상 비밀번호가 너무 어려워서 잊기 싶기 때문에)
<br>conda 기본 가상환명 설정(conda activated yeardream 매번 치기 구찮음)


<br><br><img alt="Pasted image 20240330172323.png" src="\lib\media\pasted-image-20240330172323.png"><br>
<a rel="noopener" class="external-link" href="https://drive.google.com/file/d/1uLHl3lNDwtJKfZFpxjDtA7FO27W4ULT3/view?usp=sharing" target="_blank">https://drive.google.com/file/d/1uLHl3lNDwtJKfZFpxjDtA7FO27W4ULT3/view?usp=sharing</a><br>주의다운로드를 "한 번"(매우 중요) 클릭한다.<br><img alt="Pasted image 20240330192430.png" src="\lib\media\pasted-image-20240330192430.png"><br>경고무시하고 다운로드<br><br><br>wsl은 아래를 참고해서 설치 해보도록 한다.<br>Info이어드림 스쿨 노션 -&gt; 환경 셋팅 가이드 -&gt; 2.2. Windows OS -&gt; 0. WSL<br>wsl --install
복사<br><br><br><br><img alt="Pasted image 20240330192920.png" src="\lib\media\pasted-image-20240330192920.png"><br>Note1번에 위치해 있는 2번 파일을<br>
3번 경로에 4번 위치로 이동<br><br><img alt="Pasted image 20240330193620.png" src="\lib\media\pasted-image-20240330193620.png"><br>wsl --import Ubuntu2204Yeardream4 C:wsl\yeardream C:\wsl\Ubuntu2204Yeardream4DockerComplete.tar
복사<br>하면<br><img alt="Pasted image 20240330194601.png" src="\lib\media\pasted-image-20240330194601.png"><br>요롷게<br>작업을 잘 완료했다고 나온다.<br>그리고<br><br>wsl -l -v
복사<br>치고 앤터 똭. (새끼 손가락으로 살포시 눌러야 함)<br><img alt="Pasted image 20240330194846.png" src="\lib\media\pasted-image-20240330194846.png"><br>보라.<br>우리를 괴롭혔던 별이 Ubuntu에 똭. 밖혀있다.<br>저것은 cmd에서 wsl 커맨드를 쳤을 때 기본으로 들어가겠다는 표시다.<br>
우리는 이미 Ubuntu2204Yeardream4DockerComplet가 있음으로<br>
저 건방진 혐오스런 별이 달린 녀석을 지워버릴 것이다.<br><img alt="Pasted image 20240330195355.png" src="\lib\media\pasted-image-20240330195355.png"><br><br>wsl --unregister Ubuntu
복사<br><br>별을 빼앗아 3번 위치에 꾸며줬다.<br><br><img alt="Pasted image 20240330195839.png" src="\lib\media\pasted-image-20240330195839.png"><br>
이제 커맨드 창에서 wsl만 입력하고 편해지자.<br>경고여기서 더 편해지면 도둑놈 심보임으로.<br>
그 이상은 안됨.<br>
batch...<br><br><br><br><br><img alt="Pasted image 20240330201351.png" src="\lib\media\pasted-image-20240330201351.png"><br>mysql --version
복사<br><br><img alt="Pasted image 20240330201425.png" src="\lib\media\pasted-image-20240330201425.png"><br>systemctl status mysql
복사<br>Tipq 키를 눌러서 빠져나온다.<br><br><br><img alt="Pasted image 20240330201557.png" src="\lib\media\pasted-image-20240330201557.png"><br>conda --version
복사<br><br><img alt="Pasted image 20240330201629.png" src="\lib\media\pasted-image-20240330201629.png"><br>
잘 동작 동작 하고 있다.<br><br><br><img alt="Pasted image 20240330201734.png" src="\lib\media\pasted-image-20240330201734.png"><br><br><img alt="Pasted image 20240330201951.png" src="\lib\media\pasted-image-20240330201951.png"><br>docker
복사<br>잘 동작 하고 있을지도?<br><br><br>Note음... 해두면 좋다. 안 둬도 상관은 없을까?!?<br>
하지만.. 내 메모린 소중한걸...<br><br><img alt="Pasted image 20240330175413.png" src="\lib\media\pasted-image-20240330175413.png"><br>[wsl2]
memory=4GB
processors=4
swap=1GB
localhostForwarding=true
복사<br>
<br>%USERPROFILE% 입력
<br>.wslconfig 파일 생성
<br>번 작성
<br>Note자신의 컴퓨터 사양이 좋지 않다면<br>
memory = 2GB<br>
processors = 2<br>
이렇게 설정해도 됨
사실.. 몇 번 해보고,<br>
이정도면 내 컴퓨터가 죽지 않겠구나 싶을 정도로만 주면 된다.<br><br>wsl --shutdown
복사<br><br><img alt="Pasted image 20240323001212.png" src="\lib\media\pasted-image-20240323001212.png"><br>htop 로 확인 결과<br>
<br><a data-tooltip-position="top" aria-label="https://velog.io/@alirz-pixel/wsl2-Vmmem-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A0%90%EC%9C%A0%EC%9C%A8-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0" rel="noopener" class="external-link" href="https://velog.io/@alirz-pixel/wsl2-Vmmem-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A0%90%EC%9C%A0%EC%9C%A8-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0" target="_blank">https://velog.io/@alirz-pixel/wsl2-Vmmem-메모리-점유율-해결하기</a>
<br><a rel="noopener" class="external-link" href="https://learn.microsoft.com/ko-kr/windows/wsl/wsl-config" target="_blank">https://learn.microsoft.com/ko-kr/windows/wsl/wsl-config</a>
<br><a data-tooltip-position="top" aria-label="https://velog.io/@devookim/wsl2-%EB%8B%A4%EC%9D%B4%EC%96%B4%ED%8A%B8-%EC%8B%9C%ED%82%A4%EA%B8%B0" rel="noopener" class="external-link" href="https://velog.io/@devookim/wsl2-%EB%8B%A4%EC%9D%B4%EC%96%B4%ED%8A%B8-%EC%8B%9C%ED%82%A4%EA%B8%B0" target="_blank">https://velog.io/@devookim/wsl2-다이어트-시키기</a>
]]></description><link>root\dev\wsl\이어드림스쿨-실습용-wsl-배포-import.html</link><guid isPermaLink="false">root/dev/wsl/이어드림스쿨 실습용 wsl 배포 import.md</guid><pubDate>Mon, 01 Apr 2024 07:59:34 GMT</pubDate><enclosure url="lib\media\pasted-image-20240330172323.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240330172323.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[wsl note]]></title><description><![CDATA[ 
 <br><br>wsl --install
복사<br><br><br><img alt="Pasted image 20240330105616.png" src="\lib\media\pasted-image-20240330105616.png"><br>\\wsl$
복사<br><br><br><br>
<br><a data-tooltip-position="top" aria-label="https://kit2013.tistory.com/187" rel="noopener" class="external-link" href="https://kit2013.tistory.com/187" target="_blank">useradd, adduser 차이</a>
<br>sudo usermod username
복사<br><br>[user] default=&lt;username&gt;
복사<br><br><br><br>C:\Users\&lt;유저명&gt;\AppData\Local\Packages\&lt;리눅스이름&gt;\LocalState
복사<br><br>wsl -l -v
복사<br><br>wsl --export Ubuntu F:\0.Users\ubuntu\ubuntu-22-04.tar
복사<br><br>Noteext4.vhdx 파일이 존재하는 디렉토리에는 불러 올 수 없다.<br>wsl --import Ubuntu2204 F:\0.Users\ubuntu\ F:\0.Users\ubuntu\ubuntu-22-04.tar
wsl --import Ubuntu2204Yeardream4 F:\0.Users\ubuntu\Ubuntu2204Yeardream4 F:\0.Users\ubuntu\backup\yeardream4\3.Ubuntu2204Yeardream4DockerComplete.tar
복사<br><br># 모두
wsl --shutdown

# 지정
wsl -t Ubuntu
복사<br><br>wsl -s Ubuntu2204
복사<br><br>wsl --unregister Ubuntu
복사<br>
<br><a rel="noopener" class="external-link" href="https://learn.microsoft.com/ko-kr/windows/wsl/install" target="_blank">https://learn.microsoft.com/ko-kr/windows/wsl/install</a>
<br><a rel="noopener" class="external-link" href="https://lucycle.tistory.com/353" target="_blank">https://lucycle.tistory.com/353</a>
<br><a data-tooltip-position="top" aria-label="https://velog.io/@darktrace1/WSL-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%9C%84%EC%B9%98-%EC%98%AE%EA%B8%B0%EA%B8%B0" rel="noopener" class="external-link" href="https://velog.io/@darktrace1/WSL-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%9C%84%EC%B9%98-%EC%98%AE%EA%B8%B0%EA%B8%B0" target="_blank">https://velog.io/@darktrace1/WSL-저장소-위치-옮기기</a>
<br><a rel="noopener" class="external-link" href="https://jooy34.tistory.com/29" target="_blank">https://jooy34.tistory.com/29</a>
<br><br><br><br>[wsl2]
memory=4GB
processors=4
swap=1GB
localhostForwarding=true
복사<br>%USERPROFILE% 에 .wslconfig 파일 생성 및 작성<br>wsl --shutdown
복사<br><br><img alt="Pasted image 20240323001212.png" src="\lib\media\pasted-image-20240323001212.png"><br>htop 로 확인 결과<br>
<br><a data-tooltip-position="top" aria-label="https://velog.io/@alirz-pixel/wsl2-Vmmem-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A0%90%EC%9C%A0%EC%9C%A8-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0" rel="noopener" class="external-link" href="https://velog.io/@alirz-pixel/wsl2-Vmmem-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A0%90%EC%9C%A0%EC%9C%A8-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0" target="_blank">https://velog.io/@alirz-pixel/wsl2-Vmmem-메모리-점유율-해결하기</a>
<br><a rel="noopener" class="external-link" href="https://learn.microsoft.com/ko-kr/windows/wsl/wsl-config" target="_blank">https://learn.microsoft.com/ko-kr/windows/wsl/wsl-config</a>
<br><a data-tooltip-position="top" aria-label="https://velog.io/@devookim/wsl2-%EB%8B%A4%EC%9D%B4%EC%96%B4%ED%8A%B8-%EC%8B%9C%ED%82%A4%EA%B8%B0" rel="noopener" class="external-link" href="https://velog.io/@devookim/wsl2-%EB%8B%A4%EC%9D%B4%EC%96%B4%ED%8A%B8-%EC%8B%9C%ED%82%A4%EA%B8%B0" target="_blank">https://velog.io/@devookim/wsl2-다이어트-시키기</a>
<br><br><br><a data-href="도커 설치 및 기본 사용법" href="\root\dev\wsl\도커-설치-및-기본-사용법.html" class="internal-link" target="_self" rel="noopener">도커 설치 및 기본 사용법</a><br>Importantwsl 환경이라 도커 데스크탑 사용하라도 처음에 20초 정도 멈춘다.<br>
무시하자.<br>
<br><a rel="noopener" class="external-link" href="https://netmarble.engineering/docker-on-wsl2-without-docker-desktop/" target="_blank">https://netmarble.engineering/docker-on-wsl2-without-docker-desktop/</a>
<br><br><br><br><br>source ~/anaconda3/etc/profile.d/conda.sh
복사<br>
<br><a rel="noopener" class="external-link" href="https://technical-support.tistory.com/112" target="_blank">https://technical-support.tistory.com/112</a>
]]></description><link>root\dev\wsl\wsl-note.html</link><guid isPermaLink="false">root/dev/wsl/wsl note.md</guid><pubDate>Thu, 18 Apr 2024 15:29:33 GMT</pubDate><enclosure url="lib\media\pasted-image-20240330105616.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib\media\pasted-image-20240330105616.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[main]]></title><description><![CDATA[ 
 <br>Note저장 공유용]]></description><link>root\main.html</link><guid isPermaLink="false">root/main.md</guid><pubDate>Thu, 18 Apr 2024 16:46:09 GMT</pubDate></item></channel></rss>